> # centering and scaling then K-means clustering
> #Using auto-data.csv
> #Goal is to group cars into different clusters based on parameters
> mydata<-read.csv("auto-data.csv")
> str(mydata) #lists parameters and parameter types
'data.frame':	197 obs. of  12 variables:
 $ MAKE     : Factor w/ 21 levels "alfa-romero",..: 18 4 9 19 12 6 13 5 15 9 ...
 $ FUELTYPE : Factor w/ 2 levels "diesel","gas": 2 2 2 2 2 2 2 2 2 2 ...
 $ ASPIRE   : Factor w/ 2 levels "std","turbo": 1 1 1 1 1 1 1 1 1 1 ...
 $ DOORS    : Factor w/ 2 levels "four","two": 2 2 2 2 2 2 2 2 2 2 ...
 $ BODY     : Factor w/ 5 levels "convertible",..: 3 3 3 3 3 3 4 3 3 3 ...
 $ DRIVE    : Factor w/ 3 levels "4wd","fwd","rwd": 2 2 2 2 2 2 2 2 2 2 ...
 $ CYLINDERS: Factor w/ 7 levels "eight","five",..: 3 5 3 3 3 3 3 3 3 3 ...
 $ HP       : int  69 48 68 62 68 60 69 68 68 68 ...
 $ RPM      : int  4900 5100 5000 4800 5500 5500 5200 5500 5500 5000 ...
 $ MPG.CITY : int  31 47 30 35 37 38 31 37 37 31 ...
 $ MPG.HWY  : int  36 53 31 39 41 42 37 41 41 38 ...
 $ PRICE    : int  5118 5151 5195 5348 5389 5399 5499 5572 5572 6095 ...
> summary(mydata)
         MAKE      FUELTYPE     ASPIRE     DOORS              BODY    DRIVE      CYLINDERS  
 toyota    :32   diesel: 19   std  :162   four:112   convertible: 6   4wd:  8   eight :  4  
 nissan    :18   gas   :178   turbo: 35   two : 85   hardtop    : 8   fwd:114   five  : 10  
 mazda     :16                                       hatchback  :67   rwd: 75   four  :153  
 honda     :13                                       sedan      :92             six   : 24  
 mitsubishi:13                                       wagon      :24             three :  1  
 subaru    :12                                                                  twelve:  1  
 (Other)   :93                                                                  two   :  4  
       HP             RPM          MPG.CITY        MPG.HWY          PRICE      
 Min.   : 48.0   Min.   :4150   Min.   :13.00   Min.   :16.00   Min.   : 5118  
 1st Qu.: 70.0   1st Qu.:4800   1st Qu.:19.00   1st Qu.:25.00   1st Qu.: 7775  
 Median : 95.0   Median :5200   Median :24.00   Median :30.00   Median :10345  
 Mean   :103.6   Mean   :5118   Mean   :25.15   Mean   :30.63   Mean   :13280  
 3rd Qu.:116.0   3rd Qu.:5500   3rd Qu.:30.00   3rd Qu.:34.00   3rd Qu.:16503  
 Max.   :262.0   Max.   :6600   Max.   :49.00   Max.   :54.00   Max.   :45400  
                                                                               
> head(mydata) #illustrates the first few observations
        MAKE FUELTYPE ASPIRE DOORS      BODY DRIVE CYLINDERS HP  RPM MPG.CITY MPG.HWY PRICE
1     subaru      gas    std   two hatchback   fwd      four 69 4900       31      36  5118
2  chevrolet      gas    std   two hatchback   fwd     three 48 5100       47      53  5151
3      mazda      gas    std   two hatchback   fwd      four 68 5000       30      31  5195
4     toyota      gas    std   two hatchback   fwd      four 62 4800       35      39  5348
5 mitsubishi      gas    std   two hatchback   fwd      four 68 5500       37      41  5389
6      honda      gas    std   two hatchback   fwd      four 60 5500       38      42  5399
> #Clustering needs all numeric values to be in the same range, and we can see from the summary that this is not the case
> #use centering and scaling for all numeric values to be in the same range
> scaled_num<-scale(mydata[8:12]) #replace with scaled values
> mydata[,8:12]<-scaled_num #puts in scaled values to the data set
> summary(mydata) #notice how now all the parameters have similar ranges
         MAKE      FUELTYPE     ASPIRE     DOORS              BODY    DRIVE      CYLINDERS  
 toyota    :32   diesel: 19   std  :162   four:112   convertible: 6   4wd:  8   eight :  4  
 nissan    :18   gas   :178   turbo: 35   two : 85   hardtop    : 8   fwd:114   five  : 10  
 mazda     :16                                       hatchback  :67   rwd: 75   four  :153  
 honda     :13                                       sedan      :92             six   : 24  
 mitsubishi:13                                       wagon      :24             three :  1  
 subaru    :12                                                                  twelve:  1  
 (Other)   :93                                                                  two   :  4  
       HP               RPM             MPG.CITY          MPG.HWY             PRICE        
 Min.   :-1.4773   Min.   :-2.0124   Min.   :-1.8876   Min.   :-2.13998   Min.   :-1.0189  
 1st Qu.:-0.8928   1st Qu.:-0.6611   1st Qu.:-0.9556   1st Qu.:-0.82347   1st Qu.:-0.6872  
 Median :-0.2286   Median : 0.1704   Median :-0.1790   Median :-0.09207   Median :-0.3664  
 Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.00000   Mean   : 0.0000  
 3rd Qu.: 0.3293   3rd Qu.: 0.7941   3rd Qu.: 0.7530   3rd Qu.: 0.49304   3rd Qu.: 0.4024  
 Max.   : 4.2083   Max.   : 3.0808   Max.   : 3.7043   Max.   : 3.41862   Max.   : 4.0099  
                                                                                           
#lets get an idea of how some of the data looks like in boxplots to determine if outliers will cause problems
> par(mfrow=c(1,5))
> boxplot(mydata$HP,col="red")
> title("HP")
> boxplot(mydata$RPM,col="blue")
> title("RPM")
> boxplot(mydata$MPG.CITY,col="yellow"); title("MPG.CITY")
> boxplot(mydata$MPG.HWY,col="purple"); title("MPG.HWY")
> #note that there are a lot of outliers. Only a few outliers could effect clustering by having some clusters having very few points.
> library(class)
> set.seed(111) #makes results reproducible
> auto_subset<-mydata[1:100,c(8,12)]
> clusters<-kmeans(auto_subset,4) #runs the kmeans function with k=4 (so 4 members)
> clusters #if there was a cluster with a small size, that may be a result of outliers.
K-means clustering with 4 clusters of sizes 14, 13, 45, 28

Cluster means:
          HP      PRICE
1 -1.2173038 -0.7897212
2  0.1617528 -0.5114776
3 -0.8939749 -0.7866977
4 -0.4363931 -0.5535441

Clustering vector:
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23 
  3   1   3   1   3   1   3   3   3   3   3   3   3   3   1   3   1   1   3   3   3   3   3 
 24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46 
  3   3   3   3   3   3   1   3   4   3   1   4   3   3   3   3   3   3   3   4   3   3   3 
 47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69 
  3   2   3   4   1   1   3   4   1   1   2   2   4   1   3   4   3   4   4   3   3   3   2 
 70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92 
  4   4   4   1   4   4   4   4   4   4   4   4   3   2   2   2   3   2   4   2   2   4   4 
 93  94  95  96  97  98  99 100 
  4   2   2   4   4   4   2   4 

Within cluster sum of squares by cluster:
[1] 0.4631058 0.5804995 0.8945764 0.7937405
 (between_SS / total_SS =  87.1 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"   
[7] "size"         "iter"         "ifault"      
> #clustering vector tells you which cluster a record belongs to
> #the higher the percentage for betwee_SS/Total_SS, the better the clustering
> #now let's plot the two variables with the clusters
> par(mfrow=c(1,1))
> plot(auto_subset$HP,auto_subset$PRICE,col=clusters$cluster,pch=20,cex=2) #colour codes the clusters
> points(clusters$centers,col="purple",pch=17,cex=3) #plots the centroids
> #for clustering with all the data, we need numeric data
> for(i in 1:8){
+   mydata[,i]=as.numeric(mydata[,i]) #convert columns 1 to 8 to numbers
+ } #makes non-numeric data numeric
> summary(mydata)
      MAKE          FUELTYPE         ASPIRE          DOORS            BODY      
 Min.   : 1.00   Min.   :1.000   Min.   :1.000   Min.   :1.000   Min.   :1.000  
 1st Qu.: 9.00   1st Qu.:2.000   1st Qu.:1.000   1st Qu.:1.000   1st Qu.:3.000  
 Median :13.00   Median :2.000   Median :1.000   Median :1.000   Median :4.000  
 Mean   :12.95   Mean   :1.904   Mean   :1.178   Mean   :1.431   Mean   :3.609  
 3rd Qu.:19.00   3rd Qu.:2.000   3rd Qu.:1.000   3rd Qu.:2.000   3rd Qu.:4.000  
 Max.   :21.00   Max.   :2.000   Max.   :2.000   Max.   :2.000   Max.   :5.000  
     DRIVE        CYLINDERS           HP               RPM             MPG.CITY      
 Min.   :1.00   Min.   :1.000   Min.   :-1.4773   Min.   :-2.0124   Min.   :-1.8876  
 1st Qu.:2.00   1st Qu.:3.000   1st Qu.:-0.8928   1st Qu.:-0.6611   1st Qu.:-0.9556  
 Median :2.00   Median :3.000   Median :-0.2286   Median : 0.1704   Median :-0.1790  
 Mean   :2.34   Mean   :3.137   Mean   : 0.0000   Mean   : 0.0000   Mean   : 0.0000  
 3rd Qu.:3.00   3rd Qu.:3.000   3rd Qu.: 0.3293   3rd Qu.: 0.7941   3rd Qu.: 0.7530  
 Max.   :3.00   Max.   :7.000   Max.   : 4.2083   Max.   : 3.0808   Max.   : 3.7043  
    MPG.HWY             PRICE        
 Min.   :-2.13998   Min.   :-1.0189  
 1st Qu.:-0.82347   1st Qu.:-0.6872  
 Median :-0.09207   Median :-0.3664  
 Mean   : 0.00000   Mean   : 0.0000  
 3rd Qu.: 0.49304   3rd Qu.: 0.4024  
 Max.   : 3.41862   Max.   : 4.0099  
> set.seed(111)
> clusters<-kmeans(mydata[,7:12],4)
> clusters #outputs the cluster centroids, the clustering vector, and a 59.6% between_SS/Total_SS
K-means clustering with 4 clusters of sizes 17, 69, 58, 53

Cluster means:
  CYLINDERS         HP        RPM   MPG.CITY     MPG.HWY      PRICE
1  3.058824  1.9796801 -0.2270034 -1.3119885 -1.38276962  2.5989078
2  3.304348  0.5272485  0.5651029 -0.7260210 -0.67082939  0.1784968
3  3.034483 -0.9156976  0.2618208  1.1547190  1.16138433 -0.7812503
4  3.056604 -0.3193254 -0.9494084  0.1023688  0.04592491 -0.2110415

Clustering vector:
  [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 3 3 3 3 3 4 4 3 3 3 3 3 3 3 3 3 4 3
 [45] 4 3 3 2 3 4 3 3 3 3 4 3 2 2 3 3 3 4 4 4 3 4 3 4 4 4 3 4 4 3 4 4 4 4 4 3 4 4 2 2 2 3 2 4
 [89] 4 2 4 2 4 4 2 4 4 3 2 4 4 4 2 4 4 4 4 4 4 2 4 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 4 4 2
[133] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 4 2 2 4 2 4 2 2 2 4 2 2 2 2 2 2 1 4 4 2 2
[177] 4 2 2 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

Within cluster sum of squares by cluster:
[1]  88.45851 174.93040 106.38039  75.83286
 (between_SS / total_SS =  59.6 %)

Available components:

[1] "cluster"      "centers"      "totss"        "withinss"     "tot.withinss" "betweenss"   
[7] "size"         "iter"         "ifault"      
> #but how many clusters does the data actually group into?
> #to do this, run the code with different cluster numbers to find the optimal number of clusters
> wssplot<-function(data,nc=15,seed=1234){
+   wss<-(nrow(data)-1)*sum(apply(data,2,var))
+   for (i in 2:nc){
+     set.seed(seed)
+     wss[i]<-sum(kmeans(data,centers=i)$withinss)}
+   plot(1:nc,wss,type="b",xlab="Number of Clusters",ylab="Within groups sum of squares",col="red")}
> wssplot(mydata) #plots the sum of squares against the number of clusters
> #the optimal number appears to be 3, where it bends is called the knee. 
> #After the knee, the group sum of squares decreases slowly, suggesting that the knee is the optimal group number
